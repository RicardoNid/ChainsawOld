package DSP

import java.security._
import javax.crypto._

class RSA {


}

object RSA {
  def main(args: Array[String]): Unit = {
    val keys = KeyPairGenerator.getInstance("RSA").generateKeyPair()
    // you can find modulus and two exponents in the formatted string, but how to get them?
    println(keys.getPrivate)
    println(keys.getPublic)

    val text = "a" * 1000
    val cipher = Cipher.getInstance("RSA")
    cipher.init(Cipher.ENCRYPT_MODE, keys.getPublic)
    val result: Array[Byte] = cipher.doFinal()

    val modulo = BigInt("20052480983609711487550367285203421468830579987450697418585595294342692616475635493434669565253021204715227259697581233312089081083080549617338599720289913366487962180196746563306603654425008711726633769424416012620368674472608391908269453775619030634895201614084156248962521606955109890601641474403268906745233260546275059095149597331986029523931666940951404080317148959082358935666215814861719926771888349062575681285824783350449058820399367793914152170963177027474731126359131357040603475163723794493605461574051703007079183346369700973757662927627164952058138186600946813446322749504971872968357812403490883605297")
    println(modulo % 2)
    println(modulo / 100)

  }
}


