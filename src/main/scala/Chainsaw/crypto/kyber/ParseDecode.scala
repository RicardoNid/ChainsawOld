package Chainsaw.crypto.kyber

import Chainsaw.DFG._
import Chainsaw._
import Chainsaw.crypto.kyber.Keccak._
import Chainsaw.crypto.symmetric._
import Chainsaw.dspTest._
import spinal.core.Component.push
import spinal.core._
import spinal.core.sim._
import spinal.lib._
import spinal.lib.fsm.{EntryPoint, State, StateMachine}

import scala.{+:, ::}
import scala.collection.{breakOut, immutable}
import scala.collection.mutable.ArrayBuffer
import scala.language.postfixOps

object ParseDecode {

//  case class Parse() extends  Component with DSPTestable [Vec[Bits], Vec[Bits]] {
//    override val dataIn: Flow[Vec[Bits]] = slave Flow Vec(Bits(8 bits), 504)
//    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(12 bits), 256)
//    override val latency: int32 = 5080
//
//    val regs = Reg(Vec(Bits(8 bits),504))
//    val reg256  = Reg(Vec(Bits(12 bits),256))
//    val counter = Reg(UInt(9 bits))init(0)
//    val len = Reg(UInt(log2Up(504) bits))init(0)
//    val begin = Reg(Bool())init(False)
//    val valid = Reg(Bool())init (False)
//    when(dataIn.valid){
//      begin:= True
//      regs:= dataIn.payload
//    }
//    when(begin){
//      when((len+3)===504|counter===256){
//        begin:=False
//        len:=0
//        valid:=True
//      }.otherwise{
//       len:=len+3
//        valid:=False
//      }
//     // val a0 = dataIn.payload(len+ 1)(3 downto 0) ## dataIn.payload(len)
//      //val a1 = dataIn.payload(len +2) ## dataIn.payload(len +1 )(7 downto 4)
//
//      val a0 = regs(len+ 1)(3 downto 0) ## regs(len)
//      val a1 = regs(len +2) ## regs(len +1 )(7 downto 4)
//
//      when((a0.asUInt<q) && (a1.asUInt>=q) ){
//        counter := counter+1
//        reg256 := Vec(  reg256.takeRight(255) :+ a0  )
//      }.elsewhen((a0.asUInt>=q )&&( a1.asUInt<q)){
//        counter := counter+1
//        reg256 := Vec( reg256.takeRight(255) :+ a1 )
//      }.elsewhen((a0.asUInt<q )&&( a1.asUInt<q) && ((counter+1)<256)){
//        counter := counter+2
//        reg256 := Vec( reg256.takeRight(254) :+ a0 :+a1)
//      }.elsewhen((a0.asUInt<q )&&( a1.asUInt<q) && ((counter+1)>=256)){
//        counter := counter+1
//        reg256 := Vec( reg256.takeRight(255) :+ a0)
//      }
//    }.otherwise{
//      valid:=False
//    }
//    dataOut.payload:=reg256
//    dataOut.valid := valid
//
//  }

 case class parse() extends Component {
   val dataIn = slave Flow Bits(24 bits)
   val dataOut = master Flow Bits(24 bits)
   val clear = in Bool()default(False)

   val reg3 = Reg(Vec(UInt(12 bits),3))
   val count = Counter(0,255)
   val regCount = Reg(UInt(3 bits))init(0)
   val d1 = dataIn.payload(11 downto 0).asUInt
   val d2 = dataIn.payload(23 downto 12).asUInt
   val outValid = Reg(Bool())init(False)
   val out = Reg(Bool())init (False)
   when(clear){
     outValid := False
     out:=False
     regCount:=0
   }
   .elsewhen(dataIn.valid){
     out := False
     when(d1 < 3329 & d2 >= 3329) {
       reg3 := Vec(d1 +: reg3.take(2))
       when((regCount + 1) >= 2) {
         regCount := 0
         outValid := True
       }.otherwise {
         regCount := regCount + 1
         outValid := False
       }
     }.elsewhen(d1 >= 3329 & d2 < 3329) {
       reg3 := Vec(d2 +: reg3.take(2))
       when((regCount + 1) >=2) {
         regCount := 0
         outValid := True
       }.otherwise {
         regCount := regCount + 1
         outValid := False
       }
     }.elsewhen(d1 < 3329 & d2 < 3329) {
       reg3 := Vec(d2 +: d1 +: reg3.take(1))
       when((regCount + 2) === 2) {
         regCount := regCount
         outValid := True
         out:=False
       }.otherwise{
         regCount := regCount
         out:=True
         outValid := True
       }
     }.otherwise {
       outValid := False
       out:=False
     }
   }.otherwise{
     outValid := False
     out:=False
   }


   dataOut.valid:=outValid
   dataOut.payload := Mux(out,reg3.takeRight(2).map(_.asBits).reduce(_##_),reg3.take(2).map(_.asBits).reduce(_##_))
  }


  case class parseOrignal() extends Component {
    val dataIn = slave Flow Bits(24 bits)
    val dataOut = master Flow Bits(24 bits)
    val clear = in Bool()

    val reg3 = Reg(Vec(UInt(12 bits),3))
    val count = Counter(0,255)
    val regCount = Reg(UInt(3 bits))init(0)
    val d1 = dataIn.payload(11 downto 0).asUInt
    val d2 = dataIn.payload(23 downto 12).asUInt
    val outValid = Reg(Bool())init(False)
    val out = Reg(Bool())init (False)

    when(dataIn.valid){
      out := False
      when(d1 < 3329 & d2 >= 3329) {
        reg3 := Vec(d1 +: reg3.take(2))
        when((regCount + 1) >= 2) {
          regCount := 0
          outValid := True
        }.otherwise {
          regCount := regCount + 1
          outValid := False
        }
      }.elsewhen(d1 >= 3329 & d2 < 3329) {
        reg3 := Vec(d2 +: reg3.take(2))
        when((regCount + 1) >=2) {
          regCount := 0
          outValid := True
        }.otherwise {
          regCount := regCount + 1
          outValid := False
        }
      }.elsewhen(d1 < 3329 & d2 < 3329) {
        reg3 := Vec(d2 +: d1 +: reg3.take(1))
        when((regCount + 2) === 2) {
          regCount := regCount
          outValid := True
          out:=False
        }.otherwise{
          regCount := regCount
          out:=True
          outValid := True
        }
      }.otherwise {
        outValid := False
        out:=False
      }
    }.otherwise{
      outValid := False
      out:=False
    }


    dataOut.valid:=outValid
    dataOut.payload := Mux(out,reg3.takeRight(2).map(_.asBits).reduce(_##_),reg3.take(2).map(_.asBits).reduce(_##_))
  }


  case class paresTiming(InputLength:Int,ctr:Int) extends Component with DSPTestable [Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]] = slave Flow Vec(Bits(8 bits), InputLength)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(16 bits), 256)
    override val latency: int32 = 5080

    val reg256 : Vec[Bits] = Reg(Vec(B(0,16 bits),256))

    val fsm =new StateMachine{
      val IDLE = new State with EntryPoint
      val PARSING = new State

      val buf = Reg(Vec(Bits(24 bits), InputLength/3))
      val counter = Reg(UInt(9 bits))init(0)
      val len = Reg(UInt(log2Up(InputLength) bits))init(0)
      val itest = Reg(UInt( log2Up(InputLength/3) bits))init (0)
      dataOut.valid:= False
      dataOut.payload := reg256
      IDLE.whenIsActive{
        when(dataIn.valid){
         buf := Vec(dataIn.payload.grouped(3).map(_.reverse.reduce(_ ## _)))
          goto(PARSING)
          counter := 0
          len := 0
          itest := 0
        }
      }
      PARSING.whenIsActive{
        when((counter >= ctr) | ( (len + 3) > InputLength)){
          goto(IDLE)
          dataOut.valid:= True
//          dataOut.payload := reg256
        }.otherwise{
          val Seq(x1,x2)= buf(itest).subdivideIn(12 bits).map(B(_,16 bits))
          when((x1.asSInt<q) && (x2.asSInt>q) ){
            counter := counter+1
            reg256 := Vec(  reg256.takeRight(255) :+ x1  )
          }.elsewhen((x1.asSInt>=q )&&( x2.asSInt<q)){
            counter := counter+1
            reg256 := Vec( reg256.takeRight(255) :+ x2 )
          }.elsewhen((x1.asSInt<q )&&( x2.asSInt<q) && ((counter+1)<ctr)){
            counter := counter+2
            reg256 := Vec( reg256.takeRight(254) :+ x1 :+x2)
          }.elsewhen((x1.asSInt<q )&&( x2.asSInt<q) && ((counter+1) >=ctr)){
            counter := counter+1
            reg256 := Vec( reg256.takeRight(255) :+ x1 )
          }
          len := len+3
          itest:= itest +1
        }
      }
    }

  }




}

object TestParse {
  def main(args: Array[String]): Unit = {
    val testvalue = Seq.fill(408)(BigInt(0)).zipWithIndex.map{
          case(a,i)=>BigInt(i/5)
        }
    val gold = Seq.fill(272)(BigInt(0)).zipWithIndex.map {
      case (a, i) => if (i < 100) (BigInt(i))
      else (BigInt(10))
    }
    val parsetest = Seq(
      "68","17","174","237","175","152","90","108","105","175","171","169","27","208","238","143","196","64","120","63","184","118","150","116","233","136","26","205","97","160","237","29","235","34","169","43","126","0","42","36","39","208","166","17","12","25","61","33","234","253","149","193","213","222","10","154","217","168","43","20","178","111","57","190","189","10","110","27","173","233","162","97","41","213","87","202","225","244","253","111","255","12","39","74","101","232","242","216","52","110","110","76","81","139","113","149","172","240","199","200","43","148","206","41","99","217","87","49","140","176","94","165","174","163","157","20","29","110","174","30","12","221","166","104","179","222","137","198","151","48","171","14","91","193","32","3","151","242","197","130","224","190","172","33","162","104","171","176","187","65","160","157","120","225","212","74","228","10","4","100","226","105","238","192","136","22","66","57","133","171","237","189","237","30","71","221","169","230","30","236","17","93","253","158","8","69","66","210","217","11","225","132","90","253","218","54","200","15","224","59","122","131","140","99","30","1","181","97","218","215","204","186","11","3","157","120","173","56","74","193","25","247","143","119","41","20","207","247","237","18","182","30","45","93","187","126","246","189","29","61","233","184","79","209","141","96","206","222","75","203","181","189","39","68","32","241","49","22","110","142","197","192","206","2","124","100","240","180","74","67","82","95","254","127","23","43","11","137","222","69","46","227","12","216","6","154","110","201","209","101","148","40","171","116","44","74","134","115","44","52","206","101","241","231","209","238","9","104","93","180","90","243","214","76","169","147","154","176","221","225","38","54","48","132","148","138","141","223","232","218","168","61","19","91","246","213","175","144","2","44","249","157","97","17","65","58","89","34","98","25","13","234","176","67","89","105","157","246","102","53","193","39","211","188","47","2","91","230","95","41","130","163","59","6","166","219","214","128","238","110","20","240","19","110","26","15","79","27","181","80","94","177","24","51","170","162","122","214","99","207","47","70","210","168","224","0","198","213","201","98","174","30","183","119","18","160","186","221","178","114","250","124","233","58","211","112","43","51","226","245","49","226","154","39","35","66","180","20","153","189","134","161","21","27","189","47","55","134","234","36","204","131","190","95","113","70","152","151","212","233","103","30","200","236","145","31","79","106","168","44","177","181","153","47","219","148","36","97","111","179","253","13","192","67","11","231","3","223","228","166","59","137","226","159","106","19","240","126","160","158","185","49","254","95"
    ).map(BigInt(_, 10))
   val Goldenvalue1 =Seq(
     "324","2785","2442","3162","1686","2991","2714","27","1167","1036","2947","1654","1865","2281","424","461","2566","2338","698","126","672","1828","422","193","531","2399","1473","2570","2984","322","918","171","2926","2769","745","1562","1321","1405","458","1804","1186","2149","1240","1763","3182","1300","395","2391","172","3199","3016","2370","2510","1586","2009","789","140","1515","2618","1181","465","490","2669","872","1673","2428","2864","234","347","524","1795","709","3262","538","2210","2742","2992","1051","1929","1249","1197","2788","64","612","1694","238","2188","534","916","2949","494","2717","2206","1104","578","267","2126","2102","252","3040","1955","3203","1592","286","2896","2657","2764","187","1929","2221","1187","2497","1935","663","749","2913","1490","977","2281","1275","1544","1213","1483","3035","1063","516","497","355","3160","44","1148","2740","1076","1919","689","2315","2060","109","3222","1489","2374","2856","1866","2604","2148","3187","834","1486","487","2057","1494","2740","3286","2708","2707","2825","477","622","54","2115","2708","2264","2271","307","1627","175","41","2348","2527","353","1041","2362","549","2402","209","234","1083","2393","2518","1782","854","1985","34","1627","1534","553","2616","1595","2656","1755","2061","326","1008","1761","1264","1307","1291","350","395","2611","2602","1658","1597","1122","2258","1536","713","2790","1822","1915","18","2986","733","1835","3322","826","1805","811","501","1946","562","1090","331","2155","1441","433","882","2694","590","972","3048","351","1127","1944","2025","486","3272","2334","1700","3240","2834","2485","761","1243","585","2870","3072","2883","2982","2195","1705","19","2031","2969","1535","3246"
   ).map(BigInt(_,10))
    //doFlowPeekPokeTest("testParseTry",ParseDecode.paresTiming(504,256), Seq(parsetest), Goldenvalue1)
    //doFlowPeekPokeTest("parse",ParseDecode.Parse(),Seq(parsetest), Goldenvalue1)
    //println(Goldenvalue1.length)

    val testGenA = Seq(
      "25","23","29","143","26","58","99","52","72","254","156","131","189","40","9","123","178","154","22","141","181","175","29","27","53","75","104","129","162","206","80","155"
    ).map(BigInt(_,10))

    val GenBasic =Seq(
      "324","2785","2442","3162","1686","2991","2714","27","1167","1036","2947","1654","1865","2281","424","461","2566","2338","698","126","672","1828","422","193","531","2399","1473","2570","2984","322","918","171","2926","2769","745","1562","1321","1405","458","1804","1186","2149","1240","1763","3182","1300","395","2391","172","3199","3016","2370","2510","1586","2009","789","140","1515","2618","1181","465","490","2669","872","1673","2428","2864","234","347","524","1795","709","3262","538","2210","2742","2992","1051","1929","1249","1197","2788","64","612","1694","238","2188","534","916","2949","494","2717","2206","1104","578","267","2126","2102","252","3040","1955","3203","1592","286","2896","2657","2764","187","1929","2221","1187","2497","1935","663","749","2913","1490","977","2281","1275","1544","1213","1483","3035","1063","516","497","355","3160","44","1148","2740","1076","1919","689","2315","2060","109","3222","1489","2374","2856","1866","2604","2148","3187","834","1486","487","2057","1494","2740","3286","2708","2707","2825","477","622","54","2115","2708","2264","2271","307","1627","175","41","2348","2527","353","1041","2362","549","2402","209","234","1083","2393","2518","1782","854","1985","34","1627","1534","553","2616","1595","2656","1755","2061","326","1008","1761","1264","1307","1291","350","395","2611","2602","1658","1597","1122","2258","1536","713","2790","1822","1915","18","2986","733","1835","3322","826","1805","811","501","1946","562","1090","331","2155","1441","433","882","2694","590","972","3048","351","1127","1944","2025","486","3272","2334","1700","3240","2834","2485","761","1243","585","2870","3072","2883","2982","2195","1705","19","2031","2969","1535","3246"
    ).map(BigInt(_,10))

    val GenAvalue = Seq(
      "375","124","1865","2763","287","3000","1429","469","105","549","1752","1084","498","1905","554","729","1034","1596","1788","3273","1310","940","2253","2999","2279","1849","942","2608","879","3151","1769","2271","792","22","3033","3266","1207","903","1140","141","399","1798","2900","1344","2065","578","1293","3138","1238","10","585","2174","1953","3292","17","260","1574","1970","401","337","699","617","2715","1656","2355","352","355","1189","962","89","1790","3213","47","819","2942","466","240","614","2264","711","2780","1812","3286","2208","1883","3079","1892","1264","1220","1321","1629","919","1103","1199","1176","3211","3136","1002","1943","1778","2207","2567","3108","247","1964","3085","3219","3286","1789","10","692","3","235","1953","292","2846","1742","1023","577","542","2611","592","3057","1902","1810","3104","3242","307","3132","962","808","616","1429","2755","1459","350","738","2850","1868","1860","1137","2626","2250","946","1932","88","1088","2236","914","3","261","980","767","2293","718","1604","1423","1055","744","1256","1240","2869","2586","1472","3250","944","2305","2624","323","2761","1688","2808","1086","1903","1524","1774","2717","1729","2650","1977","3154","622","1228","3068","3146","3132","623","1769","1487","1579","165","932","46","719","2661","311","161","360","341","1084","666","2954","339","2413","1397","2071","476","2778","1842","1590","360","417","828","22","1292","2500","260","2891","736","1301","1781","2347","471","2352","854","957","1471","370","3180","2912","2730","2782","2331","2629","1310","3215","1889","672","2384","579","1771","516","1149","2940","429","2999","386","2503","228","747","2289","2232","847","1608","0","1037","2342","2227","2132","1266","2229","3229","1732","2765","1494","1187","51","383","482","2535","114","3189","1904","2874","507","976","2000","3199","1403","2438","889","1078","1740","839","1963","664","763","2292","506","2334","896","1708","2427","3162","1023","1289","1102","2060","3320","3163","831","2470","351","1720","3312","604","1747","2108","664","2232","1319","657","1779","242","2537","1480","580","689","2497","2177","2728","187","41","2897","2148","922","3081","2420","970","292","3183","1990","394","359","875","2527","2575","469","2124","87","2218","1650","54","3","1321","3179","1714","419","2927","2077","2682","242","427","1616","938","1920","1028","793","2836","2788","484","561","498","2901","110","2839","1602","1453","2094","2304","1683","420","1307","1951","181","3041","229","532","732","1273","1788","1840","658","2647","3133","1164","1267","746","1750","808","867","3265","1060","975","767","1099","2713","262","1412","3175","1955","523","459","163","933","530","2828","2480","341","813","2741","508","2290","2300","2584","942","833","1594","3262","3040","1908","1343","2737","1362","1710","627","1093","2157","988","1725","1010","3224","2423","3325","2715","120","2873","716","306","774","1487","2114","2141","456","3180","358","2294","1736","2658","894","2303","1308","2912","126","48","2221","2761","1637","1176","3039","2275","2584","604","1600","1188","2523","2807","2869","2870","738","895","1808","2914","6","1411","1882","1264","3079","362","2806","1921","2623","1785","1216","2918","1355","400","3126","905","100","455","2742","2796","1849","2907","1833","369","2663","438","1380","1830","2783","162","709","3052","347","2303","496","637","302","2313","33","324","2785","2442","3162","1686","2991","2714","27","1167","1036","2947","1654","1865","2281","424","461","2566","2338","698","126","672","1828","422","193","531","2399","1473","2570","2984","322","918","171","2926","2769","745","1562","1321","1405","458","1804","1186","2149","1240","1763","3182","1300","395","2391","172","3199","3016","2370","2510","1586","2009","789","140","1515","2618","1181","465","490","2669","872","1673","2428","2864","234","347","524","1795","709","3262","538","2210","2742","2992","1051","1929","1249","1197","2788","64","612","1694","238","2188","534","916","2949","494","2717","2206","1104","578","267","2126","2102","252","3040","1955","3203","1592","286","2896","2657","2764","187","1929","2221","1187","2497","1935","663","749","2913","1490","977","2281","1275","1544","1213","1483","3035","1063","516","497","355","3160","44","1148","2740","1076","1919","689","2315","2060","109","3222","1489","2374","2856","1866","2604","2148","3187","834","1486","487","2057","1494","2740","3286","2708","2707","2825","477","622","54","2115","2708","2264","2271","307","1627","175","41","2348","2527","353","1041","2362","549","2402","209","234","1083","2393","2518","1782","854","1985","34","1627","1534","553","2616","1595","2656","1755","2061","326","1008","1761","1264","1307","1291","350","395","2611","2602","1658","1597","1122","2258","1536","713","2790","1822","1915","18","2986","733","1835","3322","826","1805","811","501","1946","562","1090","331","2155","1441","433","882","2694","590","972","3048","351","1127","1944","2025","486","3272","2334","1700","3240","2834","2485","761","1243","585","2870","3072","2883","2982","2195","1705","19","2031","2969","1535","3246","640","2252","1530","466","953","1825","902","3055","2350","1023","360","3017","183","3020","2589","293","2988","2314","1402","1470","2650","3144","829","181","1104","571","1013","222","2321","2989","2142","1301","1841","1773","3076","1772","1060","927","3108","1874","1597","2122","2032","2118","1634","2143","3307","2720","67","443","2276","1416","2896","2521","558","2203","1469","152","3160","1024","1168","3239","1398","1682","2177","2974","2279","1863","337","2718","1281","1235","2581","1736","123","2523","1623","3066","2105","471","2247","951","2536","859","3310","1157","2946","375","1451","1490","2682","640","304","266","497","2856","2657","400","2740","607","307","477","1456","2755","2693","1084","1184","462","3121","2703","919","2977","1457","2136","2975","1487","2493","1266","2312","3065","2021","125","934","2902","2091","2689","1678","634","1759","1648","2494","1735","2361","1070","2182","1315","1050","1128","2983","1290","1542","1252","918","1952","1940","1875","1","1500","1687","612","812","186","1531","530","430","1048","2895","2823","1544","1286","2381","1638","467","786","219","2999","2643","2005","2130","989","2020","1252","3222","681","345","1156","1675","2221","1888","1840","642","1805","776","294","3182","3299","1591","2756","1171","1203","1062","2149","605","2647","2366","490","1822","1468","1945","2736","146","2702","2360","1128","25","3120","2248","2410","2192","2579","1447","2798","863","2423","1053","1979","370","97","518","422","3103","2887","778","128","473","901","2529","601","2279","1115","439","905","1673","3148","1084","3085","261","203","1414","787","1311","1082","1741","460","3189","1703","1896","2343","2844","2966","2453","1570","2682","2359","1084","324"
    ).map(BigInt(_,10))
    //println(GenAvalue.length)
    //doFlowPeekPokeTest("testGenA",ParseDecode.GenA(), Seq(testGenA), GenAvalue)
    VivadoSynth(ParseDecode.parse())
    val myTest = Seq("DD0000","ddd000","ddd111","222222","999fff","000000","fff222","333FFF").map(BigInt(_,16))
    GenRTL(ParseDecode.parse())
    SimConfig.withFstWave.compile(new ParseDecode.parse).doSim { dut =>
            dut.clockDomain.forkStimulus(10)
            dut.clockDomain.waitSampling()
            var idx = 0
            dut.dataIn.valid#=false

            sleep(1)
            while(idx<1000)
            {
              if(idx<8){
                dut.dataIn.valid #= true
                dut.dataIn.payload #= myTest(idx)
              }
              else{
                dut.dataIn.valid #= false
                dut.dataIn.payload #= idx
              }
              idx += 1
              sleep(10)
            }
          }
  }
}
