package Chainsaw.crypto.kyber

import Chainsaw.DFG._
import Chainsaw._
import Chainsaw.crypto.kyber.Reduce.csubq
import Chainsaw.crypto.kyber._

import Chainsaw.crypto.symmetric._
import Chainsaw.dspTest._
import spinal.core._
import spinal.core.sim._
import spinal.lib._

import scala.collection.immutable
import scala.collection.mutable.ArrayBuffer
import scala.language.postfixOps

object CompressDecode {

  //todo :when SInt overfolow ,c code works fine

  //IN:ploy *a,OUT:128x8
  //Encode4(Compress(4)
  //ploy_compress in pack_ciphertext
  def polyCompressEn4(A: Array[SInt]): Array[Bits] = {
    require(A.forall(_.getWidth == 16) & A.size == 256)
    val Cs: Array[SInt] = A.map(a => csubq(a))
    val Ds: Array[Bits] = Cs.map(c => (((c << 4) + (q / 2)) / q).asBits.takeLow(4))
    Ds.grouped(2).map(_.reverse.reduce(_ ## _)).toArray
  }

  //IN:ployvec *a,OUT:640x8
  //Encode10(Compress(10)
  //polyvec_compress in pack_ciphertext
  def polyvecCompressEn10(A: Array[SInt]): Array[Bits] = {
    require(A.forall(_.getWidth == 16) && A.size == 512)
    val Cs                     = A.map(a => csubq(a))
    val Ds: Array[Array[Bits]] = Cs.map(c => (((c << 10) + (q / 2)) / q).takeLow(10)).grouped(4).toArray
    Ds.map(_.reverse.reduce(_ ## _).subdivideIn(8 bits)).flatten

  }

  //In ploy ; Out:32x8
  //encode1(Compress(x,1))
  //Poly_tomsg
  def polyCompressEn1(A: Array[SInt]): Array[Bits] = {
    require((A.forall(_.getWidth == 16)) && A.size == 256)
    val Cs = A.map(a => csubq(a))
    val Ds = Cs.map(c => (((c << 1) + (q / 2)) / q).takeLow(1))
    Ds.reverse.reduce(_ ## _).subdivideIn(8 bits).toArray
  }

  //IN:ploy *a,OUT:384x8
  //encode(12)
  //Polyvec_toBytes
  //without compress but with mode q
  //Used After mode q ,so  the actual bitwidth is less than 12
  def polyvecEn12(A: Array[SInt]): Array[Bits] = {
    require((A.forall(_.getWidth == 16)) && A.size == 512)
    val Cs = A.map(a => csubq(a).asBits)
    val Ds = Cs.map(_.takeLow(12)).grouped(2).toArray
    Ds.map(_.reverse.reduce(_ ## _).subdivideIn(8 bits)).flatten
  }

  // In 384*8 Out Polyvec:2*256*16
  //Decode12
  //polyvec_frombytes in unpack_ciphertext
  def polyvecDe12(A: Array[Bits]): Array[SInt] = {
    require((A.forall(_.getWidth == 8)) && A.size == 768)
    A.grouped(3).map(_.reverse.reduce(_ ## _).subdivideIn(12 bits)).toArray.flatten.map(B(_, 16 bits).asSInt)
  }

  //IN 640*8 Out: ployvec 2*256816
  //Decompress(Decode10,10)
  //poly_decompress in unpack_ciphertext
  def polyvecDecompressDe10(A: Array[Bits]): Array[SInt] = {
    require((A.forall(_.getWidth == 8)) && A.size == 640)
    val Bs: Array[UInt] = A.grouped(5).map(_.reverse.reduce(_ ## _).subdivideIn(10 bits)).toArray.flatten.map(_.asUInt)
    Bs.map(c => (c * q + 512) >> 10).map(B(_, 16 bits).asSInt)

  }

  //In: 128*8 Out: poly 256*16
  //Decompress(Decode4,4)
  //poly_decompress in unpack_ciphertext
  def polyDecompressDe4(A: Array[Bits]): Array[SInt] = {
    require((A.forall(_.getWidth == 8)) && A.size == 128)
    val Bs: Array[UInt] = A.map(_.subdivideIn(4 bits)).flatten.map(_.asUInt)
    Bs.map(c => (c * q + 8) >> 4).map(B(_, 16 bits).asSInt)

  }

  //In:ploy  Out:32*8
  //decompress(encode1,1)
  //poly_frommsg
  def polyDecompressDe1(A: Array[Bits]): Array[SInt] = {
    require((A.forall(_.getWidth == 8)) && A.size == 32)
    val Bs: Array[UInt] = A.map(_.subdivideIn(1 bits)).flatten.map(_.asUInt)
    Bs.map(c => (c * q + 1) / 2).map(B(_, 16 bits).asSInt)
  }

  case class polyComEn4Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(16 bits), 256)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(8 bits), 128)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyCompressEn4(dataIn.payload.toArray.map(_.asSInt))))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyvecComEn10Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(16 bits), 512)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(8 bits), 640)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyvecCompressEn10(dataIn.payload.toArray.map(_.asSInt))))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyComEn1Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(16 bits), 256)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(8 bits), 32)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyCompressEn1(dataIn.payload.toArray.map(_.asSInt))))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyvecEn12Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(16 bits), 512)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(8 bits), 768)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyvecEn12(dataIn.payload.toArray.map(_.asSInt))))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyvecDe12Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(8 bits), 768)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(16 bits), 512)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyvecDe12(dataIn.payload.toArray).map(_.asBits)))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyvecDe10Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(8 bits), 640)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(16 bits), 512)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyvecDecompressDe10(dataIn.payload.toArray).map(_.asBits)))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyDe4Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(8 bits), 128)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(16 bits), 256)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyDecompressDe4(dataIn.payload.toArray).map(_.asBits)))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

  case class polyDe1Component() extends Component with DSPTestable[Vec[Bits], Vec[Bits]] {
    override val dataIn: Flow[Vec[Bits]]  = slave Flow Vec(Bits(8 bits), 32)
    override val dataOut: Flow[Vec[Bits]] = master Flow Vec(Bits(16 bits), 256)
    override val latency: int32           = 1

    dataOut.payload := RegNext(Vec(polyDecompressDe1(dataIn.payload.toArray).map(_.asBits)))
    dataOut.valid   := Delay(dataIn.valid, latency, init = False)
  }

}

object TestCompressDecode {
  def main(args: Array[String]): Unit = {
    val testvalue = Seq.fill(256)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk * 128)
    }
    val testvalue2 = Seq.fill(512)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk * 64 + 256)
    }

    val testvalue1 = Seq.fill(512)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk * 8)
    }

    val testvalueBits = Seq.fill(128)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk)
    }

    val testvalueBits12 = Seq.fill(768)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk / 3)
    }

    val testvalueBits1 = Seq.fill(32)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk)
    }
    val testvalueBits10 = Seq.fill(640)(0).zipWithIndex.map { case (i, kk) =>
      BigInt(kk / 3)
    }

    val Goldenen4 = Seq(
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "101",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "238",
      "255",
      "16",
      "33",
      "50",
      "68",
      "85",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220",
      "237",
      "255",
      "16",
      "33",
      "50",
      "68",
      "85",
      "118",
      "135",
      "153",
      "170",
      "203",
      "220"
    ).map(BigInt(_, 10))
    val Goldenen1 = Seq(
      "128",
      "255",
      "15",
      "0",
      "254",
      "63",
      "0",
      "248",
      "255",
      "0",
      "224",
      "255",
      "3",
      "128",
      "255",
      "15",
      "0",
      "254",
      "63",
      "0",
      "248",
      "255",
      "0",
      "224",
      "255",
      "3",
      "128",
      "255",
      "15",
      "0",
      "254",
      "63"
    ).map(BigInt(_, 10))
    val Goldenen10 = Seq(
      "79",
      "136",
      "97",
      "135",
      "34",
      "157",
      "196",
      "82",
      "76",
      "54",
      "236",
      "0",
      "68",
      "209",
      "73",
      "59",
      "61",
      "37",
      "150",
      "93",
      "138",
      "117",
      "22",
      "91",
      "113",
      "216",
      "177",
      "7",
      "32",
      "133",
      "39",
      "238",
      "248",
      "164",
      "152",
      "118",
      "42",
      "218",
      "105",
      "172",
      "197",
      "98",
      "203",
      "46",
      "192",
      "19",
      "159",
      "188",
      "243",
      "211",
      "98",
      "219",
      "173",
      "120",
      "231",
      "177",
      "23",
      "143",
      "61",
      "251",
      "0",
      "76",
      "112",
      "194",
      "14",
      "78",
      "136",
      "97",
      "71",
      "34",
      "157",
      "196",
      "82",
      "12",
      "54",
      "236",
      "0",
      "52",
      "209",
      "73",
      "59",
      "57",
      "37",
      "150",
      "93",
      "137",
      "117",
      "22",
      "27",
      "113",
      "216",
      "177",
      "7",
      "224",
      "132",
      "39",
      "238",
      "232",
      "164",
      "152",
      "118",
      "38",
      "218",
      "105",
      "172",
      "196",
      "98",
      "203",
      "238",
      "191",
      "19",
      "159",
      "188",
      "179",
      "211",
      "98",
      "219",
      "157",
      "120",
      "231",
      "177",
      "19",
      "143",
      "61",
      "251",
      "255",
      "79",
      "112",
      "130",
      "14",
      "78",
      "136",
      "97",
      "71",
      "34",
      "157",
      "196",
      "66",
      "12",
      "54",
      "236",
      "252",
      "51",
      "209",
      "73",
      "58",
      "57",
      "37",
      "86",
      "93",
      "137",
      "117",
      "6",
      "27",
      "113",
      "216",
      "177",
      "247",
      "223",
      "132",
      "39",
      "234",
      "232",
      "164",
      "152",
      "117",
      "38",
      "218",
      "41",
      "172",
      "196",
      "98",
      "187",
      "238",
      "191",
      "19",
      "159",
      "172",
      "179",
      "211",
      "98",
      "215",
      "157",
      "120",
      "231",
      "176",
      "19",
      "143",
      "253",
      "250",
      "255",
      "79",
      "96",
      "130",
      "14",
      "78",
      "136",
      "81",
      "71",
      "34",
      "157",
      "192",
      "66",
      "12",
      "54",
      "235",
      "252",
      "51",
      "145",
      "73",
      "58",
      "57",
      "21",
      "86",
      "93",
      "137",
      "113",
      "6",
      "27",
      "113",
      "216",
      "173",
      "247",
      "223",
      "132",
      "38",
      "234",
      "232",
      "100",
      "152",
      "117",
      "38",
      "202",
      "41",
      "172",
      "196",
      "94",
      "187",
      "238",
      "191",
      "19",
      "155",
      "172",
      "179",
      "211",
      "97",
      "215",
      "157",
      "56",
      "231",
      "176",
      "19",
      "127",
      "253",
      "250",
      "255",
      "75",
      "96",
      "130",
      "14",
      "78",
      "132",
      "81",
      "71",
      "34",
      "156",
      "192",
      "66",
      "204",
      "53",
      "235",
      "252",
      "35",
      "145",
      "73",
      "58",
      "53",
      "21",
      "86",
      "93",
      "136",
      "113",
      "6",
      "27",
      "113",
      "215",
      "173",
      "247",
      "159",
      "132",
      "38",
      "234",
      "216",
      "100",
      "152",
      "117",
      "34",
      "202",
      "41",
      "172",
      "195",
      "94",
      "187",
      "238",
      "191",
      "18",
      "155",
      "172",
      "115",
      "211",
      "97",
      "215",
      "141",
      "56",
      "231",
      "176",
      "15",
      "127",
      "253",
      "250",
      "254",
      "75",
      "96",
      "130",
      "14",
      "77",
      "132",
      "81",
      "7",
      "34",
      "156",
      "192",
      "50",
      "204",
      "53",
      "235",
      "248",
      "35",
      "145",
      "73",
      "57",
      "53",
      "21",
      "86",
      "93",
      "136",
      "113",
      "6",
      "219",
      "112",
      "215",
      "173",
      "231",
      "159",
      "132",
      "38",
      "230",
      "216",
      "100",
      "152",
      "116",
      "34",
      "202",
      "233",
      "171",
      "195",
      "94",
      "187",
      "174",
      "191",
      "18",
      "155",
      "156",
      "115",
      "211",
      "97",
      "211",
      "141",
      "56",
      "231",
      "175",
      "15",
      "127",
      "189",
      "250",
      "254",
      "75",
      "96",
      "66",
      "14",
      "77",
      "132",
      "65",
      "7",
      "34",
      "156",
      "188",
      "50",
      "204",
      "53",
      "234",
      "248",
      "35",
      "81",
      "73",
      "57",
      "53",
      "21",
      "22",
      "93",
      "136",
      "113",
      "246",
      "218",
      "112",
      "215",
      "169",
      "231",
      "159",
      "132",
      "37",
      "230",
      "216",
      "36",
      "152",
      "116",
      "34",
      "186",
      "233",
      "171",
      "195",
      "94",
      "171",
      "174",
      "191",
      "18",
      "151",
      "156",
      "115",
      "211",
      "96",
      "211",
      "141",
      "248",
      "230",
      "175",
      "15",
      "111",
      "189",
      "250",
      "254",
      "75",
      "80",
      "66",
      "14",
      "77",
      "128",
      "65",
      "7",
      "34",
      "155",
      "188",
      "50",
      "140",
      "53",
      "234",
      "248",
      "19",
      "81",
      "73",
      "57",
      "53",
      "5",
      "22",
      "93",
      "136",
      "109",
      "246",
      "218",
      "112",
      "214",
      "169",
      "231",
      "95",
      "132",
      "37",
      "230",
      "200",
      "36",
      "152",
      "116",
      "30",
      "186",
      "233",
      "171",
      "195",
      "90",
      "171",
      "174",
      "191",
      "17",
      "151",
      "156",
      "51",
      "211",
      "96",
      "211",
      "125",
      "248",
      "230",
      "175",
      "11",
      "111",
      "189",
      "250",
      "254",
      "71",
      "80",
      "66",
      "14",
      "76",
      "128",
      "65",
      "199",
      "33",
      "155",
      "188",
      "34",
      "140",
      "53",
      "234",
      "244",
      "19",
      "81",
      "73",
      "57",
      "49",
      "5",
      "22",
      "93",
      "135",
      "109",
      "246",
      "154",
      "112",
      "214",
      "169",
      "215",
      "95",
      "132",
      "37",
      "226",
      "200",
      "36",
      "152",
      "116",
      "30",
      "186",
      "233",
      "171",
      "194",
      "90",
      "171",
      "110",
      "191",
      "17",
      "151",
      "140",
      "51",
      "211",
      "96",
      "207",
      "125",
      "248",
      "230",
      "174",
      "11",
      "111",
      "189",
      "250",
      "253",
      "71",
      "80",
      "2",
      "14",
      "76",
      "128",
      "49",
      "199",
      "33",
      "155",
      "184",
      "34",
      "140",
      "53",
      "233",
      "244",
      "19",
      "81",
      "73",
      "56",
      "49",
      "5",
      "214",
      "92",
      "135",
      "109",
      "230",
      "154",
      "112",
      "214",
      "165",
      "215",
      "95",
      "132",
      "36",
      "226",
      "200",
      "36",
      "152",
      "115",
      "30",
      "186",
      "169",
      "171",
      "194",
      "90",
      "155",
      "110",
      "191",
      "17",
      "147",
      "140",
      "51",
      "211",
      "95",
      "207",
      "125",
      "184",
      "230"
    ).map(BigInt(_, 10))
    val Goldenen12 = Seq(
      "0",
      "128",
      "0",
      "16",
      "128",
      "1",
      "32",
      "128",
      "2",
      "48",
      "128",
      "3",
      "64",
      "128",
      "4",
      "80",
      "128",
      "5",
      "96",
      "128",
      "6",
      "112",
      "128",
      "7",
      "128",
      "128",
      "8",
      "144",
      "128",
      "9",
      "160",
      "128",
      "10",
      "176",
      "128",
      "11",
      "192",
      "128",
      "12",
      "208",
      "128",
      "13",
      "224",
      "128",
      "14",
      "240",
      "128",
      "15",
      "0",
      "129",
      "16",
      "16",
      "129",
      "17",
      "32",
      "129",
      "18",
      "48",
      "129",
      "19",
      "64",
      "129",
      "20",
      "80",
      "129",
      "21",
      "96",
      "129",
      "22",
      "112",
      "129",
      "23",
      "128",
      "129",
      "24",
      "144",
      "129",
      "25",
      "160",
      "129",
      "26",
      "176",
      "129",
      "27",
      "192",
      "129",
      "28",
      "208",
      "129",
      "29",
      "224",
      "129",
      "30",
      "240",
      "129",
      "31",
      "0",
      "130",
      "32",
      "16",
      "130",
      "33",
      "32",
      "130",
      "34",
      "48",
      "130",
      "35",
      "64",
      "130",
      "36",
      "80",
      "130",
      "37",
      "96",
      "130",
      "38",
      "112",
      "130",
      "39",
      "128",
      "130",
      "40",
      "144",
      "130",
      "41",
      "160",
      "130",
      "42",
      "176",
      "130",
      "43",
      "192",
      "130",
      "44",
      "208",
      "130",
      "45",
      "224",
      "130",
      "46",
      "240",
      "130",
      "47",
      "0",
      "131",
      "48",
      "16",
      "131",
      "49",
      "32",
      "131",
      "50",
      "48",
      "131",
      "51",
      "64",
      "131",
      "52",
      "80",
      "131",
      "53",
      "96",
      "131",
      "54",
      "112",
      "131",
      "55",
      "128",
      "131",
      "56",
      "144",
      "131",
      "57",
      "160",
      "131",
      "58",
      "176",
      "131",
      "59",
      "192",
      "131",
      "60",
      "208",
      "131",
      "61",
      "224",
      "131",
      "62",
      "240",
      "131",
      "63",
      "0",
      "132",
      "64",
      "16",
      "132",
      "65",
      "32",
      "132",
      "66",
      "48",
      "132",
      "67",
      "64",
      "132",
      "68",
      "80",
      "132",
      "69",
      "96",
      "132",
      "70",
      "112",
      "132",
      "71",
      "128",
      "132",
      "72",
      "144",
      "132",
      "73",
      "160",
      "132",
      "74",
      "176",
      "132",
      "75",
      "192",
      "132",
      "76",
      "208",
      "132",
      "77",
      "224",
      "132",
      "78",
      "240",
      "132",
      "79",
      "0",
      "133",
      "80",
      "16",
      "133",
      "81",
      "32",
      "133",
      "82",
      "48",
      "133",
      "83",
      "64",
      "133",
      "84",
      "80",
      "133",
      "85",
      "96",
      "133",
      "86",
      "112",
      "133",
      "87",
      "128",
      "133",
      "88",
      "144",
      "133",
      "89",
      "160",
      "133",
      "90",
      "176",
      "133",
      "91",
      "192",
      "133",
      "92",
      "208",
      "133",
      "93",
      "224",
      "133",
      "94",
      "240",
      "133",
      "95",
      "0",
      "134",
      "96",
      "16",
      "134",
      "97",
      "32",
      "134",
      "98",
      "48",
      "134",
      "99",
      "64",
      "134",
      "100",
      "80",
      "134",
      "101",
      "96",
      "134",
      "102",
      "112",
      "134",
      "103",
      "128",
      "134",
      "104",
      "144",
      "134",
      "105",
      "160",
      "134",
      "106",
      "176",
      "134",
      "107",
      "192",
      "134",
      "108",
      "208",
      "134",
      "109",
      "224",
      "134",
      "110",
      "240",
      "134",
      "111",
      "0",
      "135",
      "112",
      "16",
      "135",
      "113",
      "32",
      "135",
      "114",
      "48",
      "135",
      "115",
      "64",
      "135",
      "116",
      "80",
      "135",
      "117",
      "96",
      "135",
      "118",
      "112",
      "135",
      "119",
      "128",
      "135",
      "120",
      "144",
      "135",
      "121",
      "160",
      "135",
      "122",
      "176",
      "135",
      "123",
      "192",
      "135",
      "124",
      "208",
      "135",
      "125",
      "224",
      "135",
      "126",
      "240",
      "135",
      "127",
      "0",
      "136",
      "128",
      "16",
      "136",
      "129",
      "32",
      "136",
      "130",
      "48",
      "136",
      "131",
      "64",
      "136",
      "132",
      "80",
      "136",
      "133",
      "96",
      "136",
      "134",
      "112",
      "136",
      "135",
      "128",
      "136",
      "136",
      "144",
      "136",
      "137",
      "160",
      "136",
      "138",
      "176",
      "136",
      "139",
      "192",
      "136",
      "140",
      "208",
      "136",
      "141",
      "224",
      "136",
      "142",
      "240",
      "136",
      "143",
      "0",
      "137",
      "144",
      "16",
      "137",
      "145",
      "32",
      "137",
      "146",
      "48",
      "137",
      "147",
      "64",
      "137",
      "148",
      "80",
      "137",
      "149",
      "96",
      "137",
      "150",
      "112",
      "137",
      "151",
      "128",
      "137",
      "152",
      "144",
      "137",
      "153",
      "160",
      "137",
      "154",
      "176",
      "137",
      "155",
      "192",
      "137",
      "156",
      "208",
      "137",
      "157",
      "224",
      "137",
      "158",
      "240",
      "137",
      "159",
      "0",
      "138",
      "160",
      "16",
      "138",
      "161",
      "32",
      "138",
      "162",
      "48",
      "138",
      "163",
      "64",
      "138",
      "164",
      "80",
      "138",
      "165",
      "96",
      "138",
      "166",
      "112",
      "138",
      "167",
      "128",
      "138",
      "168",
      "144",
      "138",
      "169",
      "160",
      "138",
      "170",
      "176",
      "138",
      "171",
      "192",
      "138",
      "172",
      "208",
      "138",
      "173",
      "224",
      "138",
      "174",
      "240",
      "138",
      "175",
      "0",
      "139",
      "176",
      "16",
      "139",
      "177",
      "32",
      "139",
      "178",
      "48",
      "139",
      "179",
      "64",
      "139",
      "180",
      "80",
      "139",
      "181",
      "96",
      "139",
      "182",
      "112",
      "139",
      "183",
      "128",
      "139",
      "184",
      "144",
      "139",
      "185",
      "160",
      "139",
      "186",
      "176",
      "139",
      "187",
      "192",
      "139",
      "188",
      "208",
      "139",
      "189",
      "224",
      "139",
      "190",
      "240",
      "139",
      "191",
      "0",
      "140",
      "192",
      "16",
      "140",
      "193",
      "32",
      "140",
      "194",
      "48",
      "140",
      "195",
      "64",
      "140",
      "196",
      "80",
      "140",
      "197",
      "96",
      "140",
      "198",
      "112",
      "140",
      "199",
      "128",
      "140",
      "200",
      "144",
      "140",
      "201",
      "160",
      "140",
      "202",
      "176",
      "140",
      "203",
      "192",
      "140",
      "204",
      "208",
      "140",
      "205",
      "224",
      "140",
      "206",
      "240",
      "140",
      "207",
      "0",
      "125",
      "0",
      "15",
      "112",
      "1",
      "31",
      "112",
      "2",
      "47",
      "112",
      "3",
      "63",
      "112",
      "4",
      "79",
      "112",
      "5",
      "95",
      "112",
      "6",
      "111",
      "112",
      "7",
      "127",
      "112",
      "8",
      "143",
      "112",
      "9",
      "159",
      "112",
      "10",
      "175",
      "112",
      "11",
      "191",
      "112",
      "12",
      "207",
      "112",
      "13",
      "223",
      "112",
      "14",
      "239",
      "112",
      "15",
      "255",
      "112",
      "16",
      "15",
      "113",
      "17",
      "31",
      "113",
      "18",
      "47",
      "113",
      "19",
      "63",
      "113",
      "20",
      "79",
      "113",
      "21",
      "95",
      "113",
      "22",
      "111",
      "113",
      "23",
      "127",
      "113",
      "24",
      "143",
      "113",
      "25",
      "159",
      "113",
      "26",
      "175",
      "113",
      "27",
      "191",
      "113",
      "28",
      "207",
      "113",
      "29",
      "223",
      "113",
      "30",
      "239",
      "113",
      "31",
      "255",
      "113",
      "32",
      "15",
      "114",
      "33",
      "31",
      "114",
      "34",
      "47",
      "114",
      "35",
      "63",
      "114",
      "36",
      "79",
      "114",
      "37",
      "95",
      "114",
      "38",
      "111",
      "114",
      "39",
      "127",
      "114",
      "40",
      "143",
      "114",
      "41",
      "159",
      "114",
      "42",
      "175",
      "114",
      "43",
      "191",
      "114",
      "44",
      "207",
      "114",
      "45",
      "223",
      "114",
      "46",
      "239",
      "114",
      "47"
    ).map(BigInt(_, 10))
    doFlowPeekPokeTest("testpce4", CompressDecode.polyComEn4Component(), Seq(testvalue), Goldenen4)
    doFlowPeekPokeTest("testpce1", CompressDecode.polyComEn1Component(), Seq(testvalue), Goldenen1)
    doFlowPeekPokeTest("testpvce10", CompressDecode.polyvecComEn10Component(), Seq(testvalue2), Goldenen10)
    doFlowPeekPokeTest("testpvce12", CompressDecode.polyvecEn12Component(), Seq(testvalue1), Goldenen12)

    val Goldende4 = Seq(
      "0",
      "0",
      "208",
      "0",
      "416",
      "0",
      "624",
      "0",
      "832",
      "0",
      "1040",
      "0",
      "1248",
      "0",
      "1456",
      "0",
      "1665",
      "0",
      "1873",
      "0",
      "2081",
      "0",
      "2289",
      "0",
      "2497",
      "0",
      "2705",
      "0",
      "2913",
      "0",
      "3121",
      "0",
      "0",
      "208",
      "208",
      "208",
      "416",
      "208",
      "624",
      "208",
      "832",
      "208",
      "1040",
      "208",
      "1248",
      "208",
      "1456",
      "208",
      "1665",
      "208",
      "1873",
      "208",
      "2081",
      "208",
      "2289",
      "208",
      "2497",
      "208",
      "2705",
      "208",
      "2913",
      "208",
      "3121",
      "208",
      "0",
      "416",
      "208",
      "416",
      "416",
      "416",
      "624",
      "416",
      "832",
      "416",
      "1040",
      "416",
      "1248",
      "416",
      "1456",
      "416",
      "1665",
      "416",
      "1873",
      "416",
      "2081",
      "416",
      "2289",
      "416",
      "2497",
      "416",
      "2705",
      "416",
      "2913",
      "416",
      "3121",
      "416",
      "0",
      "624",
      "208",
      "624",
      "416",
      "624",
      "624",
      "624",
      "832",
      "624",
      "1040",
      "624",
      "1248",
      "624",
      "1456",
      "624",
      "1665",
      "624",
      "1873",
      "624",
      "2081",
      "624",
      "2289",
      "624",
      "2497",
      "624",
      "2705",
      "624",
      "2913",
      "624",
      "3121",
      "624",
      "0",
      "832",
      "208",
      "832",
      "416",
      "832",
      "624",
      "832",
      "832",
      "832",
      "1040",
      "832",
      "1248",
      "832",
      "1456",
      "832",
      "1665",
      "832",
      "1873",
      "832",
      "2081",
      "832",
      "2289",
      "832",
      "2497",
      "832",
      "2705",
      "832",
      "2913",
      "832",
      "3121",
      "832",
      "0",
      "1040",
      "208",
      "1040",
      "416",
      "1040",
      "624",
      "1040",
      "832",
      "1040",
      "1040",
      "1040",
      "1248",
      "1040",
      "1456",
      "1040",
      "1665",
      "1040",
      "1873",
      "1040",
      "2081",
      "1040",
      "2289",
      "1040",
      "2497",
      "1040",
      "2705",
      "1040",
      "2913",
      "1040",
      "3121",
      "1040",
      "0",
      "1248",
      "208",
      "1248",
      "416",
      "1248",
      "624",
      "1248",
      "832",
      "1248",
      "1040",
      "1248",
      "1248",
      "1248",
      "1456",
      "1248",
      "1665",
      "1248",
      "1873",
      "1248",
      "2081",
      "1248",
      "2289",
      "1248",
      "2497",
      "1248",
      "2705",
      "1248",
      "2913",
      "1248",
      "3121",
      "1248",
      "0",
      "1456",
      "208",
      "1456",
      "416",
      "1456",
      "624",
      "1456",
      "832",
      "1456",
      "1040",
      "1456",
      "1248",
      "1456",
      "1456",
      "1456",
      "1665",
      "1456",
      "1873",
      "1456",
      "2081",
      "1456",
      "2289",
      "1456",
      "2497",
      "1456",
      "2705",
      "1456",
      "2913",
      "1456",
      "3121",
      "1456"
    ).map(BigInt(_, 10))
    val Goldende12 = Seq(
      "0",
      "0",
      "257",
      "16",
      "514",
      "32",
      "771",
      "48",
      "1028",
      "64",
      "1285",
      "80",
      "1542",
      "96",
      "1799",
      "112",
      "2056",
      "128",
      "2313",
      "144",
      "2570",
      "160",
      "2827",
      "176",
      "3084",
      "192",
      "3341",
      "208",
      "3598",
      "224",
      "3855",
      "240",
      "16",
      "257",
      "273",
      "273",
      "530",
      "289",
      "787",
      "305",
      "1044",
      "321",
      "1301",
      "337",
      "1558",
      "353",
      "1815",
      "369",
      "2072",
      "385",
      "2329",
      "401",
      "2586",
      "417",
      "2843",
      "433",
      "3100",
      "449",
      "3357",
      "465",
      "3614",
      "481",
      "3871",
      "497",
      "32",
      "514",
      "289",
      "530",
      "546",
      "546",
      "803",
      "562",
      "1060",
      "578",
      "1317",
      "594",
      "1574",
      "610",
      "1831",
      "626",
      "2088",
      "642",
      "2345",
      "658",
      "2602",
      "674",
      "2859",
      "690",
      "3116",
      "706",
      "3373",
      "722",
      "3630",
      "738",
      "3887",
      "754",
      "48",
      "771",
      "305",
      "787",
      "562",
      "803",
      "819",
      "819",
      "1076",
      "835",
      "1333",
      "851",
      "1590",
      "867",
      "1847",
      "883",
      "2104",
      "899",
      "2361",
      "915",
      "2618",
      "931",
      "2875",
      "947",
      "3132",
      "963",
      "3389",
      "979",
      "3646",
      "995",
      "3903",
      "1011",
      "64",
      "1028",
      "321",
      "1044",
      "578",
      "1060",
      "835",
      "1076",
      "1092",
      "1092",
      "1349",
      "1108",
      "1606",
      "1124",
      "1863",
      "1140",
      "2120",
      "1156",
      "2377",
      "1172",
      "2634",
      "1188",
      "2891",
      "1204",
      "3148",
      "1220",
      "3405",
      "1236",
      "3662",
      "1252",
      "3919",
      "1268",
      "80",
      "1285",
      "337",
      "1301",
      "594",
      "1317",
      "851",
      "1333",
      "1108",
      "1349",
      "1365",
      "1365",
      "1622",
      "1381",
      "1879",
      "1397",
      "2136",
      "1413",
      "2393",
      "1429",
      "2650",
      "1445",
      "2907",
      "1461",
      "3164",
      "1477",
      "3421",
      "1493",
      "3678",
      "1509",
      "3935",
      "1525",
      "96",
      "1542",
      "353",
      "1558",
      "610",
      "1574",
      "867",
      "1590",
      "1124",
      "1606",
      "1381",
      "1622",
      "1638",
      "1638",
      "1895",
      "1654",
      "2152",
      "1670",
      "2409",
      "1686",
      "2666",
      "1702",
      "2923",
      "1718",
      "3180",
      "1734",
      "3437",
      "1750",
      "3694",
      "1766",
      "3951",
      "1782",
      "112",
      "1799",
      "369",
      "1815",
      "626",
      "1831",
      "883",
      "1847",
      "1140",
      "1863",
      "1397",
      "1879",
      "1654",
      "1895",
      "1911",
      "1911",
      "2168",
      "1927",
      "2425",
      "1943",
      "2682",
      "1959",
      "2939",
      "1975",
      "3196",
      "1991",
      "3453",
      "2007",
      "3710",
      "2023",
      "3967",
      "2039",
      "128",
      "2056",
      "385",
      "2072",
      "642",
      "2088",
      "899",
      "2104",
      "1156",
      "2120",
      "1413",
      "2136",
      "1670",
      "2152",
      "1927",
      "2168",
      "2184",
      "2184",
      "2441",
      "2200",
      "2698",
      "2216",
      "2955",
      "2232",
      "3212",
      "2248",
      "3469",
      "2264",
      "3726",
      "2280",
      "3983",
      "2296",
      "144",
      "2313",
      "401",
      "2329",
      "658",
      "2345",
      "915",
      "2361",
      "1172",
      "2377",
      "1429",
      "2393",
      "1686",
      "2409",
      "1943",
      "2425",
      "2200",
      "2441",
      "2457",
      "2457",
      "2714",
      "2473",
      "2971",
      "2489",
      "3228",
      "2505",
      "3485",
      "2521",
      "3742",
      "2537",
      "3999",
      "2553",
      "160",
      "2570",
      "417",
      "2586",
      "674",
      "2602",
      "931",
      "2618",
      "1188",
      "2634",
      "1445",
      "2650",
      "1702",
      "2666",
      "1959",
      "2682",
      "2216",
      "2698",
      "2473",
      "2714",
      "2730",
      "2730",
      "2987",
      "2746",
      "3244",
      "2762",
      "3501",
      "2778",
      "3758",
      "2794",
      "4015",
      "2810",
      "176",
      "2827",
      "433",
      "2843",
      "690",
      "2859",
      "947",
      "2875",
      "1204",
      "2891",
      "1461",
      "2907",
      "1718",
      "2923",
      "1975",
      "2939",
      "2232",
      "2955",
      "2489",
      "2971",
      "2746",
      "2987",
      "3003",
      "3003",
      "3260",
      "3019",
      "3517",
      "3035",
      "3774",
      "3051",
      "4031",
      "3067",
      "192",
      "3084",
      "449",
      "3100",
      "706",
      "3116",
      "963",
      "3132",
      "1220",
      "3148",
      "1477",
      "3164",
      "1734",
      "3180",
      "1991",
      "3196",
      "2248",
      "3212",
      "2505",
      "3228",
      "2762",
      "3244",
      "3019",
      "3260",
      "3276",
      "3276",
      "3533",
      "3292",
      "3790",
      "3308",
      "4047",
      "3324",
      "208",
      "3341",
      "465",
      "3357",
      "722",
      "3373",
      "979",
      "3389",
      "1236",
      "3405",
      "1493",
      "3421",
      "1750",
      "3437",
      "2007",
      "3453",
      "2264",
      "3469",
      "2521",
      "3485",
      "2778",
      "3501",
      "3035",
      "3517",
      "3292",
      "3533",
      "3549",
      "3549",
      "3806",
      "3565",
      "4063",
      "3581",
      "224",
      "3598",
      "481",
      "3614",
      "738",
      "3630",
      "995",
      "3646",
      "1252",
      "3662",
      "1509",
      "3678",
      "1766",
      "3694",
      "2023",
      "3710",
      "2280",
      "3726",
      "2537",
      "3742",
      "2794",
      "3758",
      "3051",
      "3774",
      "3308",
      "3790",
      "3565",
      "3806",
      "3822",
      "3822",
      "4079",
      "3838",
      "240",
      "3855",
      "497",
      "3871",
      "754",
      "3887",
      "1011",
      "3903",
      "1268",
      "3919",
      "1525",
      "3935",
      "1782",
      "3951",
      "2039",
      "3967",
      "2296",
      "3983",
      "2553",
      "3999",
      "2810",
      "4015",
      "3067",
      "4031",
      "3324",
      "4047",
      "3581",
      "4063",
      "3838",
      "4079",
      "4095",
      "4095"
    ).map(BigInt(_, 10))
    val Goldende1 = Seq(
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "0",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "0",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "0",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0",
      "1665",
      "1665",
      "1665",
      "1665",
      "1665",
      "0",
      "0",
      "0"
    ).map(BigInt(_, 10))
    val Goldende10 = Seq(
      "0",
      "0",
      "52",
      "13",
      "1668",
      "416",
      "104",
      "39",
      "2507",
      "832",
      "208",
      "52",
      "849",
      "1044",
      "312",
      "78",
      "2516",
      "1460",
      "364",
      "104",
      "26",
      "1879",
      "468",
      "117",
      "1697",
      "2087",
      "572",
      "143",
      "36",
      "2507",
      "624",
      "169",
      "875",
      "2923",
      "728",
      "182",
      "2546",
      "3131",
      "832",
      "208",
      "884",
      "221",
      "888",
      "234",
      "1723",
      "637",
      "992",
      "247",
      "65",
      "849",
      "1096",
      "273",
      "1733",
      "1265",
      "1148",
      "299",
      "2572",
      "1681",
      "1252",
      "312",
      "914",
      "1892",
      "1356",
      "338",
      "2581",
      "2308",
      "1408",
      "364",
      "91",
      "2728",
      "1512",
      "377",
      "1762",
      "2936",
      "1616",
      "403",
      "101",
      "26",
      "1671",
      "429",
      "940",
      "442",
      "1775",
      "442",
      "2611",
      "650",
      "1879",
      "468",
      "949",
      "1070",
      "1931",
      "494",
      "1788",
      "1486",
      "2035",
      "507",
      "130",
      "1697",
      "2139",
      "533",
      "1798",
      "2113",
      "2191",
      "559",
      "2637",
      "2529",
      "2295",
      "572",
      "979",
      "2741",
      "2399",
      "598",
      "2646",
      "3157",
      "2451",
      "624",
      "156",
      "247",
      "2559",
      "637",
      "1827",
      "455",
      "2663",
      "663",
      "166",
      "875",
      "2715",
      "689",
      "1005",
      "1291",
      "2819",
      "702",
      "2676",
      "1499",
      "2923",
      "728",
      "1014",
      "1918",
      "2975",
      "754",
      "1853",
      "2334",
      "3079",
      "767",
      "195",
      "2546",
      "3183",
      "793",
      "1863",
      "2962",
      "3235",
      "819",
      "2702",
      "49",
      "13",
      "836",
      "1044",
      "260",
      "117",
      "862",
      "2711",
      "676",
      "169",
      "888",
      "221",
      "1096",
      "273",
      "901",
      "1892",
      "1304",
      "377",
      "927",
      "231",
      "1723",
      "429",
      "953",
      "1070",
      "2139",
      "533",
      "966",
      "2741",
      "2347",
      "637",
      "992",
      "1079",
      "2767",
      "689",
      "1018",
      "1918",
      "3183",
      "793",
      "1031",
      "260",
      "65",
      "901",
      "1057",
      "1928",
      "481",
      "953",
      "1083",
      "2767",
      "897",
      "1057",
      "1096",
      "1109",
      "1109",
      "1161",
      "1122",
      "2776",
      "1525",
      "1213",
      "1148",
      "286",
      "1944",
      "1317",
      "1161",
      "1957",
      "2152",
      "1421",
      "1187",
      "296",
      "2572",
      "1473",
      "1213",
      "1135",
      "2988",
      "1577",
      "1226",
      "2806",
      "3196",
      "1681",
      "1252",
      "1144",
      "286",
      "1736",
      "1278",
      "1983",
      "702",
      "1840",
      "1291",
      "325",
      "914",
      "1944",
      "1317",
      "1993",
      "1330",
      "1996",
      "1343",
      "2832",
      "1746",
      "2100",
      "1356",
      "1174",
      "1957",
      "2204",
      "1382",
      "2841",
      "2373",
      "2256",
      "1408",
      "351",
      "2793",
      "2360",
      "1421",
      "2022",
      "3001",
      "2464",
      "1447",
      "361",
      "91",
      "2520",
      "1473",
      "1200",
      "507",
      "2624",
      "1486",
      "2871",
      "715",
      "2728",
      "1512",
      "1209",
      "1135",
      "2780",
      "1538",
      "2048",
      "1551",
      "2884",
      "1551",
      "390",
      "1762",
      "2988",
      "1577",
      "2058",
      "2178",
      "3040",
      "1603",
      "2897",
      "2594",
      "3144",
      "1616",
      "1239",
      "2806",
      "3248",
      "1642",
      "2906",
      "3222",
      "3300",
      "1668",
      "416",
      "312",
      "78",
      "1684",
      "2087",
      "520",
      "182",
      "1710",
      "426",
      "940",
      "234",
      "1736",
      "1265",
      "1356",
      "338",
      "1749",
      "2936",
      "1564",
      "442",
      "1775",
      "1274",
      "1983",
      "494",
      "1801",
      "2113",
      "2399",
      "598",
      "1814",
      "455",
      "2611",
      "702",
      "1840",
      "2123",
      "3027",
      "754",
      "1866",
      "2962",
      "114",
      "862",
      "1879",
      "1304",
      "325",
      "966",
      "1905",
      "2971",
      "741",
      "1018",
      "1931",
      "481",
      "1161",
      "1122",
      "1944",
      "2152",
      "1369",
      "1226",
      "1970",
      "491",
      "1788",
      "1278",
      "1996",
      "1330",
      "2204",
      "1382",
      "2009",
      "3001",
      "2412",
      "1486",
      "2035",
      "1339",
      "2832",
      "1538",
      "2061",
      "2178",
      "3248",
      "1642",
      "2074",
      "520",
      "130",
      "1749",
      "2100",
      "2188",
      "546",
      "1801",
      "2126",
      "3027",
      "962",
      "1905",
      "2139",
      "1369",
      "1174",
      "2009",
      "2165",
      "3036",
      "1590",
      "2061",
      "2191",
      "546",
      "2009",
      "2165",
      "2204",
      "2217",
      "2217",
      "2269",
      "2230",
      "556",
      "2637",
      "2321",
      "2256",
      "1395",
      "3053",
      "2425",
      "2269",
      "3066",
      "3261",
      "2529",
      "2295",
      "1404",
      "351",
      "2585",
      "2321",
      "2243",
      "767",
      "2689",
      "2334",
      "585",
      "979",
      "2793",
      "2360",
      "2253",
      "1395",
      "2845",
      "2386",
      "3092",
      "1811",
      "2949",
      "2399",
      "1434",
      "2022",
      "3053",
      "2425",
      "3101",
      "2438",
      "3105",
      "2451",
      "611",
      "2858",
      "3209",
      "2464",
      "2282",
      "3066",
      "3313",
      "2490",
      "621",
      "156",
      "39",
      "2520",
      "1460",
      "572",
      "143",
      "2533",
      "3131",
      "780",
      "247",
      "2559",
      "1469",
      "1200",
      "299",
      "2585",
      "2308",
      "1616",
      "403",
      "2598",
      "650",
      "1827",
      "507",
      "2624",
      "2318",
      "2243",
      "559",
      "2650",
      "3157",
      "2659",
      "663",
      "2663",
      "1499",
      "2871",
      "767",
      "2689",
      "3166",
      "3287",
      "819",
      "2715",
      "676",
      "377",
      "927",
      "2728",
      "2347",
      "585",
      "1031",
      "2754",
      "686",
      "1005",
      "1083",
      "2780"
    ).map(BigInt(_, 10))
    doFlowPeekPokeTest("testpvcde12", CompressDecode.polyvecDe12Component(), Seq(testvalueBits12), Goldende12)
    doFlowPeekPokeTest("testpde1", CompressDecode.polyDe1Component(), Seq(testvalueBits1), Goldende1)
    doFlowPeekPokeTest("testpde4", CompressDecode.polyDe4Component(), Seq(testvalueBits), Goldende4)
    doFlowPeekPokeTest("testpvcde10", CompressDecode.polyvecDe10Component(), Seq(testvalueBits10), Goldende10)

  }
}
