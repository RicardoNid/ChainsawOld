package Chainsaw.fastAlgos

import spinal.core._
import spinal.core.sim._
import spinal.lib._
import spinal.lib.fsm._

import Chainsaw._
import Chainsaw.matlabIO._
import Chainsaw.dspTest._

import breeze.linalg._
import breeze.math._
import breeze.numerics._
import breeze.numerics.constants._
import breeze.signal._

object Qammod {

  def getSymbols(modulationOrder: Int) = {
    require(isPow2(modulationOrder))
    val rawData = modulationOrder match {
      case 2 =>
        Seq(-1.0, 0.0, 1.0, 0.0)
      case 4 =>
        Seq(-1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0)
      case 8 =>
        Seq(-3.0, 1.0, -3.0, -1.0, -1.0, 1.0, -1.0, -1.0, 3.0, 1.0, 3.0, -1.0, 1.0, 1.0, 1.0, -1.0)
      case 16 =>
        Seq(-3.0, 3.0, -3.0, 1.0, -3.0, -3.0, -3.0, -1.0, -1.0, 3.0, -1.0, 1.0, -1.0, -3.0, -1.0, -1.0, 3.0, 3.0, 3.0, 1.0, 3.0, -3.0, 3.0, -1.0, 1.0, 3.0, 1.0, 1.0, 1.0, -3.0, 1.0, -1.0)
      case 32 =>
        Seq(-3.0, 5.0, -1.0, 5.0, -3.0, -5.0, -1.0, -5.0, -5.0, 3.0, -5.0, 1.0, -5.0, -3.0, -5.0, -1.0, -1.0, 3.0, -1.0, 1.0, -1.0, -3.0, -1.0, -1.0, -3.0, 3.0, -3.0, 1.0, -3.0, -3.0, -3.0, -1.0,
          3.0, 5.0, 1.0, 5.0, 3.0, -5.0, 1.0, -5.0, 5.0, 3.0, 5.0, 1.0, 5.0, -3.0, 5.0, -1.0, 1.0, 3.0, 1.0, 1.0, 1.0, -3.0, 1.0, -1.0, 3.0, 3.0, 3.0, 1.0, 3.0, -3.0, 3.0, -1.0)
      case 64 =>
        Seq(-7.0, 7.0, -7.0, 5.0, -7.0, 1.0, -7.0, 3.0, -7.0, -7.0, -7.0, -5.0, -7.0, -1.0, -7.0, -3.0, -5.0, 7.0, -5.0, 5.0, -5.0, 1.0, -5.0, 3.0, -5.0, -7.0, -5.0, -5.0, -5.0, -1.0, -5.0, -3.0,
          -1.0, 7.0, -1.0, 5.0, -1.0, 1.0, -1.0, 3.0, -1.0, -7.0, -1.0, -5.0, -1.0, -1.0, -1.0, -3.0, -3.0, 7.0, -3.0, 5.0, -3.0, 1.0, -3.0, 3.0, -3.0, -7.0, -3.0, -5.0, -3.0, -1.0, -3.0, -3.0,
          7.0, 7.0, 7.0, 5.0, 7.0, 1.0, 7.0, 3.0, 7.0, -7.0, 7.0, -5.0, 7.0, -1.0, 7.0, -3.0, 5.0, 7.0, 5.0, 5.0, 5.0, 1.0, 5.0, 3.0, 5.0, -7.0, 5.0, -5.0, 5.0, -1.0, 5.0, -3.0,
          1.0, 7.0, 1.0, 5.0, 1.0, 1.0, 1.0, 3.0, 1.0, -7.0, 1.0, -5.0, 1.0, -1.0, 1.0, -3.0, 3.0, 7.0, 3.0, 5.0, 3.0, 1.0, 3.0, 3.0, 3.0, -7.0, 3.0, -5.0, 3.0, -1.0, 3.0, -3.0)
      case 128 =>
        Seq(-7.0, 9.0, -7.0, 11.0, -1.0, 9.0, -1.0, 11.0, -7.0, -9.0, -7.0, -11.0, -1.0, -9.0, -1.0, -11.0, -5.0, 9.0, -5.0, 11.0, -3.0, 9.0, -3.0, 11.0, -5.0, -9.0, -5.0, -11.0, -3.0, -9.0, -3.0, -11.0,
          -9.0, 7.0, -9.0, 5.0, -9.0, 1.0, -9.0, 3.0, -9.0, -7.0, -9.0, -5.0, -9.0, -1.0, -9.0, -3.0, -11.0, 7.0, -11.0, 5.0, -11.0, 1.0, -11.0, 3.0, -11.0, -7.0, -11.0, -5.0, -11.0, -1.0, -11.0, -3.0,
          -1.0, 7.0, -1.0, 5.0, -1.0, 1.0, -1.0, 3.0, -1.0, -7.0, -1.0, -5.0, -1.0, -1.0, -1.0, -3.0, -3.0, 7.0, -3.0, 5.0, -3.0, 1.0, -3.0, 3.0, -3.0, -7.0, -3.0, -5.0, -3.0, -1.0, -3.0, -3.0,
          -7.0, 7.0, -7.0, 5.0, -7.0, 1.0, -7.0, 3.0, -7.0, -7.0, -7.0, -5.0, -7.0, -1.0, -7.0, -3.0, -5.0, 7.0, -5.0, 5.0, -5.0, 1.0, -5.0, 3.0, -5.0, -7.0, -5.0, -5.0, -5.0, -1.0, -5.0, -3.0,
          7.0, 9.0, 7.0, 11.0, 1.0, 9.0, 1.0, 11.0, 7.0, -9.0, 7.0, -11.0, 1.0, -9.0, 1.0, -11.0, 5.0, 9.0, 5.0, 11.0, 3.0, 9.0, 3.0, 11.0, 5.0, -9.0, 5.0, -11.0, 3.0, -9.0, 3.0, -11.0,
          9.0, 7.0, 9.0, 5.0, 9.0, 1.0, 9.0, 3.0, 9.0, -7.0, 9.0, -5.0, 9.0, -1.0, 9.0, -3.0, 11.0, 7.0, 11.0, 5.0, 11.0, 1.0, 11.0, 3.0, 11.0, -7.0, 11.0, -5.0, 11.0, -1.0, 11.0, -3.0,
          1.0, 7.0, 1.0, 5.0, 1.0, 1.0, 1.0, 3.0, 1.0, -7.0, 1.0, -5.0, 1.0, -1.0, 1.0, -3.0, 3.0, 7.0, 3.0, 5.0, 3.0, 1.0, 3.0, 3.0, 3.0, -7.0, 3.0, -5.0, 3.0, -1.0, 3.0, -3.0,
          7.0, 7.0, 7.0, 5.0, 7.0, 1.0, 7.0, 3.0, 7.0, -7.0, 7.0, -5.0, 7.0, -1.0, 7.0, -3.0, 5.0, 7.0, 5.0, 5.0, 5.0, 1.0, 5.0, 3.0, 5.0, -7.0, 5.0, -5.0, 5.0, -1.0, 5.0, -3.0)
      case 256 =>
        Seq(-15.0, 15.0, -15.0, 13.0, -15.0, 9.0, -15.0, 11.0, -15.0, 1.0, -15.0, 3.0, -15.0, 7.0, -15.0, 5.0, -15.0, -15.0, -15.0, -13.0, -15.0, -9.0, -15.0, -11.0, -15.0, -1.0, -15.0, -3.0, -15.0, -7.0, -15.0, -5.0,
          -13.0, 15.0, -13.0, 13.0, -13.0, 9.0, -13.0, 11.0, -13.0, 1.0, -13.0, 3.0, -13.0, 7.0, -13.0, 5.0, -13.0, -15.0, -13.0, -13.0, -13.0, -9.0, -13.0, -11.0, -13.0, -1.0, -13.0, -3.0, -13.0, -7.0, -13.0, -5.0,
          -9.0, 15.0, -9.0, 13.0, -9.0, 9.0, -9.0, 11.0, -9.0, 1.0, -9.0, 3.0, -9.0, 7.0, -9.0, 5.0, -9.0, -15.0, -9.0, -13.0, -9.0, -9.0, -9.0, -11.0, -9.0, -1.0, -9.0, -3.0, -9.0, -7.0, -9.0, -5.0,
          -11.0, 15.0, -11.0, 13.0, -11.0, 9.0, -11.0, 11.0, -11.0, 1.0, -11.0, 3.0, -11.0, 7.0, -11.0, 5.0, -11.0, -15.0, -11.0, -13.0, -11.0, -9.0, -11.0, -11.0, -11.0, -1.0, -11.0, -3.0, -11.0, -7.0, -11.0, -5.0,
          -1.0, 15.0, -1.0, 13.0, -1.0, 9.0, -1.0, 11.0, -1.0, 1.0, -1.0, 3.0, -1.0, 7.0, -1.0, 5.0, -1.0, -15.0, -1.0, -13.0, -1.0, -9.0, -1.0, -11.0, -1.0, -1.0, -1.0, -3.0, -1.0, -7.0, -1.0, -5.0,
          -3.0, 15.0, -3.0, 13.0, -3.0, 9.0, -3.0, 11.0, -3.0, 1.0, -3.0, 3.0, -3.0, 7.0, -3.0, 5.0, -3.0, -15.0, -3.0, -13.0, -3.0, -9.0, -3.0, -11.0, -3.0, -1.0, -3.0, -3.0, -3.0, -7.0, -3.0, -5.0,
          -7.0, 15.0, -7.0, 13.0, -7.0, 9.0, -7.0, 11.0, -7.0, 1.0, -7.0, 3.0, -7.0, 7.0, -7.0, 5.0, -7.0, -15.0, -7.0, -13.0, -7.0, -9.0, -7.0, -11.0, -7.0, -1.0, -7.0, -3.0, -7.0, -7.0, -7.0, -5.0,
          -5.0, 15.0, -5.0, 13.0, -5.0, 9.0, -5.0, 11.0, -5.0, 1.0, -5.0, 3.0, -5.0, 7.0, -5.0, 5.0, -5.0, -15.0, -5.0, -13.0, -5.0, -9.0, -5.0, -11.0, -5.0, -1.0, -5.0, -3.0, -5.0, -7.0, -5.0, -5.0,
          15.0, 15.0, 15.0, 13.0, 15.0, 9.0, 15.0, 11.0, 15.0, 1.0, 15.0, 3.0, 15.0, 7.0, 15.0, 5.0, 15.0, -15.0, 15.0, -13.0, 15.0, -9.0, 15.0, -11.0, 15.0, -1.0, 15.0, -3.0, 15.0, -7.0, 15.0, -5.0,
          13.0, 15.0, 13.0, 13.0, 13.0, 9.0, 13.0, 11.0, 13.0, 1.0, 13.0, 3.0, 13.0, 7.0, 13.0, 5.0, 13.0, -15.0, 13.0, -13.0, 13.0, -9.0, 13.0, -11.0, 13.0, -1.0, 13.0, -3.0, 13.0, -7.0, 13.0, -5.0,
          9.0, 15.0, 9.0, 13.0, 9.0, 9.0, 9.0, 11.0, 9.0, 1.0, 9.0, 3.0, 9.0, 7.0, 9.0, 5.0, 9.0, -15.0, 9.0, -13.0, 9.0, -9.0, 9.0, -11.0, 9.0, -1.0, 9.0, -3.0, 9.0, -7.0, 9.0, -5.0,
          11.0, 15.0, 11.0, 13.0, 11.0, 9.0, 11.0, 11.0, 11.0, 1.0, 11.0, 3.0, 11.0, 7.0, 11.0, 5.0, 11.0, -15.0, 11.0, -13.0, 11.0, -9.0, 11.0, -11.0, 11.0, -1.0, 11.0, -3.0, 11.0, -7.0, 11.0, -5.0,
          1.0, 15.0, 1.0, 13.0, 1.0, 9.0, 1.0, 11.0, 1.0, 1.0, 1.0, 3.0, 1.0, 7.0, 1.0, 5.0, 1.0, -15.0, 1.0, -13.0, 1.0, -9.0, 1.0, -11.0, 1.0, -1.0, 1.0, -3.0, 1.0, -7.0, 1.0, -5.0,
          3.0, 15.0, 3.0, 13.0, 3.0, 9.0, 3.0, 11.0, 3.0, 1.0, 3.0, 3.0, 3.0, 7.0, 3.0, 5.0, 3.0, -15.0, 3.0, -13.0, 3.0, -9.0, 3.0, -11.0, 3.0, -1.0, 3.0, -3.0, 3.0, -7.0, 3.0, -5.0,
          7.0, 15.0, 7.0, 13.0, 7.0, 9.0, 7.0, 11.0, 7.0, 1.0, 7.0, 3.0, 7.0, 7.0, 7.0, 5.0, 7.0, -15.0, 7.0, -13.0, 7.0, -9.0, 7.0, -11.0, 7.0, -1.0, 7.0, -3.0, 7.0, -7.0, 7.0, -5.0,
          5.0, 15.0, 5.0, 13.0, 5.0, 9.0, 5.0, 11.0, 5.0, 1.0, 5.0, 3.0, 5.0, 7.0, 5.0, 5.0, 5.0, -15.0, 5.0, -13.0, 5.0, -9.0, 5.0, -11.0, 5.0, -1.0, 5.0, -3.0, 5.0, -7.0, 5.0, -5.0)
    }

    rawData.grouped(2).map(pair => BComplex(pair(0), pair(1))).toSeq.asDv
  }

  def getAveragePower(modulationOrder: Int) = {
    val realVector = getSymbols(modulationOrder).map(_.real)
    val imagVector = getSymbols(modulationOrder).map(_.imag)
    sqrt(sum(pow(DenseVector.vertcat(realVector, imagVector), 2)) / modulationOrder) // rms of complex
  }

  // TODO: the relationship between gray & bin is 2-D in Qam

  /** use gray code order by default as there's no extra effort implementing it
   */
  def qammod(data: DenseVector[Int], modulationOrder: Int) = {
    val averagePower = getAveragePower(modulationOrder)
    val lut = getSymbols(modulationOrder)
    data.map(lut(_) / averagePower)
  }

  def main(args: Array[String]): Unit = {

    def printRaw(modulationOrder: Int) = {
      val raw = MatlabRefs.qammod(DenseVector.tabulate(modulationOrder)(i => i), modulationOrder).toArray
        .grouped(16)
        .map(_.map(complex => s"${complex.real}, ${complex.imag}").mkString(", ")).mkString(",\n")
      println(s"case $modulationOrder => Seq($raw)")
    }

    Seq(4, 8, 16, 32, 64, 128, 256).foreach(printRaw(_))
  }
}
