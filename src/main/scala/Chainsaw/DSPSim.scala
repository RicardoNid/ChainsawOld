package Chainsaw

import spinal.core._
import spinal.core.sim._
import spinal.lib._

import scala.collection.mutable

/** The report of a standard simulation, you can print it directly, or utilize its attributes
 *
 * @param trueCase  number of testCases passed
 * @param totalCase number of all testCases
 * @param log       logs on all testCases that failed, each log is a String
 * @param validLog  logs on all testCases that passed
 */
case class SimReport(trueCase: Int, totalCase: Int, log: mutable.Queue[String], validLog: mutable.Queue[String]) {
  override def toString: String = s"$trueCase/$totalCase passed, ${if (trueCase != totalCase) s"failed at: \n${log.mkString("\n")}" else "Perfect!"}"
}

//trait DSPSim extends DSPGen {
trait DSPSim[inputType <: Data, outputType <: Data, testCaseType, testResultType] extends Component with DSPDUT[inputType, outputType] {

  private val testCases = mutable.Queue[testCaseType]()
  private val lastCase = mutable.Queue[testCaseType]()
  private val refResults = mutable.Queue[testResultType]()
  private val dutResults = mutable.Queue[testResultType]()
  private val monitorPoints = mutable.Queue[Long]()

  def insertTestCase(testCase: testCaseType): Unit = testCases.enqueue(testCase)

  var trueCase = 0
  var totalCase = 0
  private val log = mutable.Queue[String]() // logs when is invalid
  private val validLog = mutable.Queue[String]() // logs when is valid

  val period = 2

  def simCycle = simTime() / period

  def poke(testCase: testCaseType, input: inputType)

  def peek(output: outputType): testResultType

  private def simInit(): Unit = {
    clockDomain.forkStimulus(period)
    input.valid #= false
    clockDomain.waitSampling(10)
  }

  /** Thread that terminates the simulation, if no result was generated during the last protect period
   *
   * @return The report of simulation
   */
  def simDone(): SimReport = {
    clockDomain.waitSampling(10)
    val protect = timing.initiationInterval - timing.latency - timing.outputInterval
    while (refResults.nonEmpty || dutResults.nonEmpty) clockDomain.waitSampling(if (protect > 0) protect else 1)
    SimReport(trueCase, totalCase, log, validLog)
  }

  /** The function that takes the testCase and return the ground truth
   *
   * @param testCase testCase
   * @return testResult
   */
  def referenceModel(testCase: testCaseType): testResultType

  /** Define the conditions by which you regard ref and dut as the same
   *
   * @param refResult - golden truth generated by the reference model
   * @param dutResult - output generated by DUT
   * @return
   */
  def isValid(refResult: testResultType, dutResult: testResultType): Boolean

  /** Message String to log when !isValid(refResult, dutResult)
   *
   * @param testCase  - testCase corresponding to the result
   * @param refResult - golden truth generated by the reference model
   * @param dutResult - output generated by DUT
   */
  def messageWhenInvalid(testCase: testCaseType, refResult: testResultType, dutResult: testResultType): String

  def messageWhenValid(testCase: testCaseType, refResult: testResultType, dutResult: testResultType): String

  /** Define when and how the testCase is passed to the DUT and the reference model
   */
  def driver(): Unit = {
    fork {
      while (true) {
        if (testCases.nonEmpty) {
          println(s"poke at $simCycle")
          monitorPoints.enqueue(simCycle + timing.latency + 1)
          val testCase = testCases.dequeue()
          lastCase.enqueue(testCase)
          val refResult = referenceModel(testCase)
          refResults.enqueue(refResult)
          input.valid #= true
          poke(testCase, input.payload)
          clockDomain.waitSampling() // input interval >= 1
          input.valid #= false
          clockDomain.waitSampling(timing.initiationInterval - timing.inputInterval)
        }
        else clockDomain.waitSampling()
      }
    }
  }

  /** Define when and how the testResult is fetched from the DUT
   */
  def monitor(): Unit = {
    fork {
      while (true) {
        if (monitorPoints.nonEmpty && simCycle == monitorPoints.head) {
          monitorPoints.dequeue()
          println(s"peek from $simCycle to $simCycle")
          val dutResult = peek(output.payload)
          dutResults.enqueue(dutResult)
          clockDomain.waitSampling() // output interval >= 1
        }
        else clockDomain.waitSampling()
      }
    }
  }

  /** Thread that compares ref and dut results, does assertion under test mode, and logs them under debug mode
   *
   */
  def scoreBoard(): Unit = {
    fork {
      while (true) {
        if (refResults.nonEmpty && dutResults.nonEmpty) {
          val refResult = refResults.dequeue()
          val dutResult = dutResults.dequeue()
          val testCase = lastCase.dequeue()
          if (!isValid(refResult, dutResult)) {
            log += messageWhenInvalid(testCase, refResult, dutResult)
            println(messageWhenInvalid(testCase, refResult, dutResult))
          }
          else {
            trueCase += 1
            validLog += messageWhenValid(testCase, refResult, dutResult)
          }
          totalCase += 1
          assert(isValid(refResult, dutResult) || debug, messageWhenInvalid(testCase, refResult, dutResult))
        }
        clockDomain.waitSampling()
      }
    }
  }

  def sim(): Unit = {
    simInit()
    driver()
    monitor()
    scoreBoard()
  }
}